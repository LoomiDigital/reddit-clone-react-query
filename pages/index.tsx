import { useState } from "react";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import useInfiniteScroll from "react-infinite-scroll-hook";

import { QueryClient, dehydrate, useQueryClient } from "@tanstack/react-query";
import client from "@d20/react-query/client";

import { GetPostsQuery, useGetPostsQuery } from "@d20/generated/graphql";
import { useGetPosts } from "@d20/hooks/useGetPosts";

import Feed from "@d20/components/Feed";
import Postbox from "@d20/components/Postbox";

const Home: NextPage = () => {
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const queryClient = useQueryClient();

  const NUMBER_OF_POSTS = 4;

  const { posts, fetchMore } = useGetPosts(NUMBER_OF_POSTS);

  const hasNextPage: boolean = posts?.pageInfo?.hasNextPage!;

  const loadItems = async () => {
    const { fetchedPosts } = await fetchMore(
      NUMBER_OF_POSTS,
      posts?.pageInfo?.endCursor
    );

    queryClient.setQueryData<GetPostsQuery | undefined>(
      useGetPostsQuery.getKey(),
      {
        posts: {
          edges: [...posts?.edges!, ...fetchedPosts?.edges!],
          pageInfo: {
            ...fetchedPosts?.pageInfo,
            ...fetchedPosts?.pageInfo!,
          },
        },
      }
    );

    setIsLoading(false);
  };

  const handleLoadMore = async () => {
    hasNextPage && loadItems();
  };

  const [sentryRef] = useInfiniteScroll({
    hasNextPage,
    loading: isLoading,
    onLoadMore: handleLoadMore,
  });

  return (
    <div className="mx-auto my-7 max-w-5xl">
      <Head>
        <title>Reddit 2.0</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Postbox />

      {posts?.edges.length && (
        <Feed
          posts={posts?.edges}
          loading={isLoading || (hasNextPage as boolean)}
          loadingRef={sentryRef}
        />
      )}
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async () => {
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery<GetPostsQuery | undefined>(
    useGetPostsQuery.getKey(),
    useGetPostsQuery.fetcher(client, { first: 4 })
  );

  return {
    props: {
      dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),
    },
  };
};

export default Home;
