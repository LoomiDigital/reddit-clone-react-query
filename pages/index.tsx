import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import client from "@d20/react-query/client";
import useInfiniteScroll from "react-infinite-scroll-hook";

import {
  GetPostsDocument,
  GetPostsQuery,
  useGetPostsQuery,
} from "@d20/generated/graphql";
import {
  QueryClient,
  dehydrate,
  useInfiniteQuery,
} from "@tanstack/react-query";

// import { newPostIncoming } from "@d20/reactivities/posts";

// import PostBox from "@d20/Components/Postbox";
import Feed from "@d20/components/Feed";
import { PostLoader } from "@d20/components/Loaders";

const Home: NextPage = () => {
  const { data, isLoading, fetchNextPage, hasNextPage } = useInfiniteQuery(
    useGetPostsQuery.getKey(),
    ({ pageParam = undefined }) => {
      return client.request<GetPostsQuery>(GetPostsDocument, {
        first: 4,
        after: pageParam,
      });
    },
    {
      getNextPageParam: (lastPage) => {
        if (lastPage?.posts?.pageInfo.hasNextPage) {
          return lastPage?.posts?.pageInfo.endCursor;
        }
        return undefined;
      },
    }
  );

  const posts = data?.pages?.map((page) => page.posts?.edges!).flat();

  const handleLoadMore = () => {
    hasNextPage && fetchNextPage();
  };

  const [sentryRef] = useInfiniteScroll({
    hasNextPage: hasNextPage as boolean,
    loading: isLoading,
    onLoadMore: handleLoadMore,
  });

  return (
    <div className="mx-auto my-7 max-w-5xl">
      <Head>
        <title>Reddit 2.0</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <PostBox />
      {newPostIncoming() && <PostLoader length={1} />}
      */}

      <Feed
        posts={posts}
        loading={isLoading || (hasNextPage as boolean)}
        loadingRef={sentryRef}
      />
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async () => {
  const queryClient = new QueryClient();

  await queryClient.fetchQuery(
    useGetPostsQuery.getKey(),
    useGetPostsQuery.fetcher(client, { first: 4 })
  );

  return {
    props: {
      dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),
    },
  };
};

export default Home;
